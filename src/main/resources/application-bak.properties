spring.jmx.enabled=false
#endpoints.jmx.unique-names=true
#endpoints.jmx.domain=www.story.com

# 页面默认前缀目录
#spring.mvc.view.prefix=/WEB-INF/views/

# 服务端口
server.port=8080
# session最大超时时间(分钟)，默认为30
server.session-timeout=60
# 该服务绑定IP地址，启动服务器时如本机不是该IP地址则抛出异常启动失败，只有特殊需求的情况下才配置
#server.address=127.0.0.1
server.address=localhost
#tomcat编码
server.tomcat.uri-encoding=UTF-8

#Http encoding
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true

#配置日志
logging.config=classpath:logback.xml

# MyBatis 配置
mybatis.typeAliasesPackage=com.ddgs.dao
mybatis.mapperLocations=classpath:sqlMappers/*.xml

#datasources
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/***?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# druid 连接池配置
#初始大小
spring.datasource.initialSize=0
#连接池最大连接数
spring.datasource.maxActive=500
#连接池最小空闲
spring.datasource.minIdle=1
#获取连接最大等待时间
spring.datasource.maxWait=60000
spring.datasource.poolPreparedStatements=false
spring.datasource.validationQuery=select 'x'
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.testWhileIdle=true
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=10000
#配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=86400000
spring.datasource.defaultAutoCommit=true
spring.datasource.maxOpenPreparedStatements=20
spring.datasource.filters=stat

# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=***
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=****
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=1500
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=200
# 连接超时时间（毫秒）
spring.redis.timeout=0


#security.oauth2.resource.filter-order=3
check.accessToken.url = http://localhost:8080/oauth2/check
